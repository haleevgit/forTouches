{"version":3,"sources":["../../file:/Users/playgendary/wn/forCamera/CameraController/assets/scripts/file:/Users/playgendary/wn/forCamera/CameraController/assets/scripts/TouchCatcher.ts"],"names":["State","ButtonTypes","ccclass","_decorator","property","Camera","_typeButton","NONE","_cameraMode","HOVER","_keyButtonPressed","_possibleKeys","KeyCode","KEY_W","KEY_S","KEY_A","KEY_D","_keyboardVelocity","onLoad","input","on","Input","EventType","TOUCH_START","this","onTouchStart","TOUCH_MOVE","onTouchMove","TOUCH_END","onTouchEnd","TOUCH_CANCEL","onTouchCancel","MOUSE_WHEEL","onMouseWheel","MOUSE_MOVE","onMouseMove","MOUSE_DOWN","onMouseDown","MOUSE_UP","onMouseUp","KEY_DOWN","onKeyDown","KEY_UP","onKeyUp","keyboardVelocity","update","_keyboardMoving","onDestroy","off","camera","node","position","Vec3","x","y","z","_transition","endState","DISABLED","tween","to","rotation","Quat","w","call","_this2","start","FIRST_FACE","event","RIGHT","touches","getTouches","length","getDeltaX","getDeltaY","pos1","getLocation","pos2","currentDistance","clone","subtract","console","log","Vec4","sensitivity","getScrollY","getButton","includes","keyCode","Component"],"mappings":"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","file":"all.js","sourcesContent":["import { _decorator, Component, input, Input, EventTouch, EventMouse, EventKeyboard, KeyCode, Camera, Enum, Vec3, Vec4, Quat, tween } from 'cc';\nconst { ccclass, property } = _decorator;\n\nexport enum State {\n    DISABLED,\n    HOVER,\n    FIRST_FACE,\n}\n\nexport enum ButtonTypes {\n    LEFT,\n    NONE,\n    RIGHT,\n}\n\n@ccclass(\"TouchCatcher\")\nexport class TouchCatcher extends Component {\n    @property(Camera)\n    camera: Camera = null;\n\n    @property\n    sensitivity: number = 1000;\n\n    @property\n    keyboardVelocity: number = 100000000000;\n\n    private _typeButton: ButtonTypes = ButtonTypes.NONE;\n    private _cameraMode: State = State.HOVER;\n    private _keyButtonPressed: KeyCode = null;\n    private _possibleKeys: number[] = [KeyCode.KEY_W, KeyCode.KEY_S, KeyCode.KEY_A, KeyCode.KEY_D];\n    private _keyboardVelocity;\n\n    onLoad () {\n        input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);\n        input.on(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);\n        input.on(Input.EventType.TOUCH_END, this.onTouchEnd, this);\n        input.on(Input.EventType.TOUCH_CANCEL, this.onTouchCancel, this);\n        input.on(Input.EventType.MOUSE_WHEEL, this.onMouseWheel, this);\n        input.on(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);\n        input.on(Input.EventType.MOUSE_DOWN, this.onMouseDown, this);\n        input.on(Input.EventType.MOUSE_UP, this.onMouseUp, this);\n        input.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);\n        input.on(Input.EventType.KEY_UP, this.onKeyUp, this);\n        this._keyboardVelocity = 1/this.keyboardVelocity\n    }\n\n    update() {\n        if (this._keyButtonPressed) this._keyboardMoving()\n    }\n\n    onDestroy () {\n        input.off(Input.EventType.TOUCH_START, this.onTouchStart, this);\n        input.off(Input.EventType.KEY_DOWN, this.onKeyDown, this);\n        input.off(Input.EventType.KEY_UP, this.onKeyUp, this);\n    }\n\n\n    _keyboardMoving() {\n        switch (this._keyButtonPressed) {\n                case KeyCode.KEY_W:\n                    this.camera.node.position = new Vec3(this.camera.node.position.x, this.camera.node.position.y, this.camera.node.position.z - this._keyboardVelocity); \n                    break;\n                case KeyCode.KEY_D:\n                    this.camera.node.position = new Vec3(this.camera.node.position.x + this._keyboardVelocity, this.camera.node.position.y, this.camera.node.position.z); \n                    break;\n                case KeyCode.KEY_A:\n                    this.camera.node.position = new Vec3(this.camera.node.position.x - this._keyboardVelocity, this.camera.node.position.y, this.camera.node.position.z); \n                    break;\n                case KeyCode.KEY_S:\n                    this.camera.node.position = new Vec3(this.camera.node.position.x, this.camera.node.position.y, this.camera.node.position.z + this._keyboardVelocity); \n                    break;\n                \n        \n                }\n    }\n\n    _transition(endState) {\n        this._cameraMode = State.DISABLED;\n\n        switch (endState) {\n            case State.HOVER: {\n                tween(this.camera.node)\n                .to(1.0, { rotation: new Quat(-0.3, this.camera.node.rotation.y, this.camera.node.rotation.z, this.camera.node.rotation.w )})       \n                .call( ()=>{\n                    this._cameraMode = State.HOVER;\n                }).start();\n\n                tween(this.camera.node)\n                .to(1.0, { position: new Vec3(this.camera.node.position.x, 10, this.camera.node.position.z)})       \n                .start();\n            }\n            break\n            case State.FIRST_FACE: {\n                tween(this.camera.node)\n                .to(1.0, { rotation: new Quat(0, this.camera.node.rotation.y, this.camera.node.rotation.z, this.camera.node.rotation.w )})       \n                .call( ()=>{\n                    this._cameraMode = State.FIRST_FACE;\n                }).start();\n\n                tween(this.camera.node)\n                .to(1.0, { position: new Vec3(this.camera.node.position.x, this.camera.node.position.y-2, this.camera.node.position.z)})       \n                .start();\n            }\n            break\n        }\n    }\n\n    onTouchStart(event: EventTouch) {\n        if (this._cameraMode === State.DISABLED) return\n\n        // console.log(event.getLocation());  // location on screen space\n        // console.log(event.getUILocation());  // location on UI space\n    }\n\n    onTouchMove(event: EventTouch) {\n        if (this._cameraMode === State.DISABLED) return\n        \n        if (this._typeButton===ButtonTypes.RIGHT) return\n        \n        if (this._cameraMode===State.HOVER) {\n            let touches = event.getTouches();\n            if (touches.length < 2) {\n                this.camera.node.position = new Vec3(this.camera.node.position.x - event.getDeltaX()/100, this.camera.node.position.y, this.camera.node.position.z + event.getDeltaY()/100); \n            } else {\n                this.camera.node.position = new Vec3(100000000, this.camera.node.position.y, this.camera.node.position.z + event.getDeltaY()/100); \n                const pos1 = touches[0].getLocation();\n                const pos2 = touches[1].getLocation();\n    \n    \n                let currentDistance = pos1.clone().subtract(pos2).length();\n                console.log(currentDistance)\n            }\n\n        }\n\n        if (this._cameraMode===State.FIRST_FACE) {\n            this.camera.node.position = new Vec3(this.camera.node.position.x, this.camera.node.position.y, this.camera.node.position.z + event.getDeltaY()/100); \n            this.camera.node.rotation = new Vec4(this.camera.node.rotation.x, this.camera.node.rotation.y - event.getDeltaX()/this.sensitivity, this.camera.node.rotation.z, this.camera.node.rotation.w); \n        }\n\n        \n    }\n\n    onTouchEnd(event: EventTouch) {\n        if (this._cameraMode === State.DISABLED) return\n        \n\n    }\n\n    onTouchCancel(event: EventTouch) {\n        if (this._cameraMode === State.DISABLED) return\n        \n        \n    }\n\n\n    onMouseWheel(event: EventMouse) {\n        if (this._cameraMode === State.DISABLED) return\n        \n        this.camera.node.position = new Vec3(this.camera.node.position.x, this.camera.node.position.y - event.getScrollY()/this.sensitivity, this.camera.node.position.z);\n        if ((this.camera.node.position.y) < 2 && this._cameraMode === State.HOVER) {\n            this._transition(State.FIRST_FACE);\n        }\n        if ((this.camera.node.position.y) > 3 && this._cameraMode === State.FIRST_FACE) {\n            this._transition(State.HOVER);\n        }\n    }\n\n    onMouseMove(event: EventMouse) {\n        if (this._cameraMode === State.DISABLED) return\n        \n        if (this._typeButton === ButtonTypes.RIGHT) {\n            this.camera.node.rotation = new Vec4(this.camera.node.rotation.x, this.camera.node.rotation.y + event.getDeltaX()/this.sensitivity, this.camera.node.rotation.z, this.camera.node.rotation.w); \n        }\n\n        if (this._typeButton === ButtonTypes.NONE && this._cameraMode === State.FIRST_FACE) {\n            this.camera.node.rotation = new Vec4(this.camera.node.rotation.x + event.getDeltaY()/this.sensitivity, this.camera.node.rotation.y - event.getDeltaX()/this.sensitivity, this.camera.node.rotation.z, this.camera.node.rotation.w); \n        }\n    }\n\n    onMouseDown(event: EventMouse) {\n        if (this._cameraMode === State.DISABLED) return\n        \n        this._typeButton = event.getButton();\n        //this.camera.node.position = new Vec3(this.camera.node.position.x, this.camera.node.position.y - event.getScrollY()/1000, this.camera.node.position.z); \n    }\n\n    onMouseUp(event: EventMouse) {\n        if (this._cameraMode === State.DISABLED) return\n        \n        this._typeButton = ButtonTypes.NONE;\n        //this.camera.node.position = new Vec3(this.camera.node.position.x, this.camera.node.position.y - event.getScrollY()/1000, this.camera.node.position.z); \n    }\n\n    onKeyDown (event: EventKeyboard) {\n        if (this._possibleKeys.includes(event.keyCode)) {\n            if (!this._keyButtonPressed) {\n                this._keyButtonPressed = event.keyCode;\n            }\n        }\n    }\n\n    onKeyUp (event: EventKeyboard) {\n        if (this._keyButtonPressed === event.keyCode) this._keyButtonPressed = null;\n    }\n}"]}